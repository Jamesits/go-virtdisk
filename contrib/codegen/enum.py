#!/usr/bin/env python3
# WARNING: All the code in this file is generated by AI. Correctness is not guaranteed.

source = '''
typedef enum _OPEN_VIRTUAL_DISK_FLAG
{
    OPEN_VIRTUAL_DISK_FLAG_NONE                = 0x00000000,

    // Open the backing store without opening any differencing chain parents.
    // This allows one to fixup broken parent links.
    OPEN_VIRTUAL_DISK_FLAG_NO_PARENTS          = 0x00000001,

    // The backing store being opened is an empty file. Do not perform virtual
    // disk verification.
    OPEN_VIRTUAL_DISK_FLAG_BLANK_FILE          = 0x00000002,

    // This flag is only specified at boot time to load the system disk
    // during virtual disk boot.  Must be kernel mode to specify this flag.
    OPEN_VIRTUAL_DISK_FLAG_BOOT_DRIVE          = 0x00000004,

    // This flag causes the backing file to be opened in cached mode.
    OPEN_VIRTUAL_DISK_FLAG_CACHED_IO           = 0x00000008,

    // Open the backing store without opening any differencing chain parents.
    // This allows one to fixup broken parent links temporarily without updating
    // the parent locator.
    OPEN_VIRTUAL_DISK_FLAG_CUSTOM_DIFF_CHAIN   = 0x00000010,

    // This flag causes all backing stores except the leaf backing store to
    // be opened in cached mode.
    OPEN_VIRTUAL_DISK_FLAG_PARENT_CACHED_IO    = 0x00000020,

    // This flag causes a Vhd Set file to be opened without any virtual disk.
    OPEN_VIRTUAL_DISK_FLAG_VHDSET_FILE_ONLY    = 0x00000040,

    // For differencing disks, relative parent locators are not used when
    // determining the path of a parent VHD.
    OPEN_VIRTUAL_DISK_FLAG_IGNORE_RELATIVE_PARENT_LOCATOR = 0x00000080,

    // Disable flushing and FUA (both for payload data and for metadata)
    // for backing files associated with this virtual disk.
    OPEN_VIRTUAL_DISK_FLAG_NO_WRITE_HARDENING = 0x00000100,

    // Open the backing store even if it is a compressed file.
    OPEN_VIRTUAL_DISK_FLAG_SUPPORT_COMPRESSED_VOLUMES = 0x00000200,

} OPEN_VIRTUAL_DISK_FLAG;
'''

# make a name camel case
def camelCase(name):
    return "".join([x.capitalize() for x in name.split("_")])

# remove all the comments
import re
source = re.sub(r'//.*', '', source)

# remove empty lines
lines = source.splitlines()
# if line consists of all empty characters
lines = [line.strip() for line in lines if len(line.strip()) > 0]
typeName = ""
values = {}
for l in lines:
    if l.startswith("typedef enum"):
        typeName = camelCase(l.split()[2])
    else:
        ll = [x.strip() for x in l.split("=")]
        if len(ll) == 2:
            values[camelCase(ll[0])] = ll[1].split(",")[0]

# generate golang code
print(f"type {typeName} uint16")
print("const (")
for k, v in values.items():
    print(f"    {k} {typeName} = {v}")
print(")")
